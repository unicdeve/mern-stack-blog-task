{"version":3,"sources":["../../../src/modules/user/user.controller.js"],"names":["register","req","res","body","errors","isValid","status","json","User","findOne","email","then","user","newUser","password","bcrypt","genSalt","parseInt","SALT","err","salt","hash","Error","save","token","_id","data","success","catch","console","log","login","inputPassword","general","compare","isMatch","currentUser","id","createdAt","updatedAt","role","changePassword","newPassword","findById"],"mappings":"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","file":"user.controller.js","sourcesContent":["import bcrypt from 'bcryptjs';\nimport User from './user.model';\nimport { SALT } from '../../constants';\nimport validateRegisterInput from '../../validations/register';\nimport { generateToken } from '../../constants/utils';\nimport validateLoginInput from '../../validations/login';\nimport validateChangePasswordInput from '../../validations/changePassword';\n\n// Register User\nexport const register = (req, res) => {\n  const { errors, isValid } = validateRegisterInput(req.body);\n\n  // check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  User.findOne({\n    email: req.body.email\n  }).then(user => {\n    errors.email = 'Email already exist.';\n\n    if (user) return res.status(400).json(errors);\n    else {\n      const newUser = new User({\n        email: req.body.email,\n        password: req.body.password\n      });\n\n      bcrypt.genSalt(parseInt(SALT), (err, salt) => {\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\n          if (err) throw new Error(err);\n          newUser.password = hash;\n\n          newUser\n            .save()\n            .then(user => {\n              const token = generateToken(user);\n              const { _id, email } = user;\n              const data = {\n                token,\n                user: { _id, email }\n              };\n\n              return res.status(201).json({ success: true, data });\n            })\n            .catch(err => console.log(err));\n        });\n      });\n    }\n  });\n};\n\nexport const login = (req, res) => {\n  const { isValid, errors } = validateLoginInput(req.body);\n\n  if (!isValid) return res.status(400).json(errors);\n\n  const { email, password: inputPassword } = req.body;\n\n  User.findOne({ email }).then(user => {\n    if (!user) {\n      // user not found\n      errors.general = 'Wrong email/password';\n      return res.status(400).json(errors);\n    }\n\n    const { _id, email, password } = user;\n\n    bcrypt.compare(inputPassword, password).then(isMatch => {\n      if (isMatch) {\n        const token = generateToken(user);\n        const data = {\n          token,\n          user: {\n            _id,\n            email\n          }\n        };\n\n        return res.json({ success: true, data });\n      } else {\n        // wrong password\n        errors.general = 'Wrong email/password';\n        return res.status(400).json(errors);\n      }\n    });\n  });\n};\n\nexport const currentUser = (req, res) => {\n  return res.json({\n    id: req.user.id,\n    email: req.user.email,\n    createdAt: req.user.createdAt,\n    updatedAt: req.user.updatedAt,\n    role: req.user.role\n  });\n};\n\nexport const changePassword = (req, res) => {\n  const { errors, isValid } = validateChangePasswordInput(req.body);\n\n  if (!isValid) return res.status(400).json(errors);\n\n  const { password, newPassword } = req.body;\n\n  User.findById(req.user.id).then(user => {\n    bcrypt.compare(password, user.password).then(async isMatch => {\n      if (!isMatch) {\n        errors.general = 'Wrong password, please try again.';\n        return res.status(400).json(errors);\n      }\n\n      user.password = await bcrypt.hash(newPassword, parseInt(SALT));\n\n      user\n        .save()\n        .then(() =>\n          res.status(201).json({ success: 'Password successfully changed.' })\n        )\n        .catch(() => {\n          errors.general =\n            'An error occured while trying to change your password, please try again';\n          return res.status(500).json(errors);\n        });\n    });\n  });\n};\n"]}